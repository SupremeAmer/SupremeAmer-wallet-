// SPDX-License-Identifier: MIT
pragma solidity ^0.8.0;

import "@openzeppelin/contracts/token/ERC20/ERC20.sol";
import "@openzeppelin/contracts/access/Ownable.sol";

contract SupremeAmerToken is ERC20, Ownable {
    uint256 public constant TOTAL_SUPPLY = 100_000_000_000 * 10**18; // 100 billion tokens
    uint256 public constant FEE_PERCENTAGE = 6; // 6% fee
    uint256 public constant STAKING_PERIOD = 30 days; // Staking period of 30 days

    struct Stake {
        uint256 amount;
        uint256 startTime;
    }

    mapping(address => Stake) public stakes;

    constructor() ERC20("SupremeAmer", "SA") {
        _mint(msg.sender, TOTAL_SUPPLY); // Mint initial supply to the contract owner
    }

    // Apply a 6% fee to transfers and withdrawals
    function _transfer(address sender, address recipient, uint256 amount) internal override {
        uint256 fee = (amount * FEE_PERCENTAGE) / 100;
        uint256 amountAfterFee = amount - fee;
        super._transfer(sender, recipient, amountAfterFee);
        super._transfer(sender, address(this), fee); // Send fee to contract
    }

    // Stake tokens for 30 days
    function stakeTokens(uint256 amount) external {
        require(amount > 0, "Cannot stake 0 tokens");
        require(balanceOf(msg.sender) >= amount, "Insufficient balance");

        // Transfer tokens to the contract for staking
        _transfer(msg.sender, address(this), amount);

        // Update staking details
        Stake storage userStake = stakes[msg.sender];
        userStake.amount += amount;
        userStake.startTime = block.timestamp;
    }

    // Withdraw staked tokens after 30 days
    function withdrawStakedTokens() external {
        Stake storage userStake = stakes[msg.sender];
        require(userStake.amount > 0, "No staked tokens to withdraw");
        require(block.timestamp >= userStake.startTime + STAKING_PERIOD, "Staking period not yet completed");

        uint256 stakedAmount = userStake.amount;
        userStake.amount = 0; // Reset staked amount

        // Transfer staked tokens back to the user
        super._transfer(address(this), msg.sender, stakedAmount);
    }

    // Owner can withdraw accumulated fees
    function withdrawFees() external onlyOwner {
        uint256 contractBalance = balanceOf(address(this));
        require(contractBalance > 0, "No fees to withdraw");

        super._transfer(address(this), msg.sender, contractBalance);
    }
}
